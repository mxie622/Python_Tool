text = ["ASP.NET Site Maps",
"Adding scripting functionality to .NET applications",
"How do I connect to a database and loop over a recordset in C # ?",
"How do I delete a file which is locked by another process in C # ?",
"Is nAnt still supported and suitable for .net 3.5 / VS2008 ?",
".NET Unit Testing packages ?",
"What are effective options for embedding video in an ASP.NET web site ?",
"MySQL / Apache Error in PHP MySQL query",
"How to set up unit testing for Visual Studio C++",
"How do you pack a visual studio c++ project for release ?",
"How to learn ADO.NET",
"Speed difference in using inline strings vs concatenation in php5?",
"When do you use the "this" keyword?",
"C#.NET Winforms: Is it possible to override Label.Autosize?",
"Get MIME type of a local file in PHP5 without a PECL extension?"]

import random
random.choices(titles, k = 10)
import spacy
nlp = spacy.load("en")
doc = nlp(text[0])
print([t for t in doc], type(doc))
t = doc[0]
from spacy import displacy
displacy.render(doc)

# example
doc = nlp("01/07/2021 20:19:01 [WARNING][5661] workloadendpoint.go 75: Operation Delete is not supported on WorkloadEndpoint type.")

# for t in doc:
#     print(t, t.pos_, t.dep_, t.tag_, t.ent_type_, t.text)
for i in doc.ents:
    print(i)

# RULE-BASED
# msg = "curl:(28) Operation timed out after 10001 milliseconds with 0 bytes received"
doc = nlp("I am not an objective-c user, also like golang, python. But py is the earlist")
obj_c_pattern = [{'LOWER': 'objective'},
          {'IS_PUNCT': True, 'OP': '?'},
          {'LOWER': 'c'}]
obj_c_pattern2 = [{'LOWER': 'objectivec'}]
ruby_pattern = [{"LOWER": 'ruby'}]
js_pattern = [{'LOWER': {'IN': ['java', 'js', 'javascript']}}]
golang_pattern = [{'LOWER': {"IN": ['go', 'golang']},
                  'POS': {'NOT_IN': ['VERB']}}]
python_pattern = [{'LOWER': 'python'}]
net_pattern = [{'LOWER': {'IN': ['.net', 'net']}}]
perl_pattern = [{'LOWER': 'perl'}]
php_pattern = [{'LOWER': 'php'}]
Csharp_pattern1 = [{'LOWER': 'c'}, {'LOWER': 'sharp'}]
Csharp_pattern2 = [{'LOWER': {'IN': ['c#', 'c #', 'C#', 'C #']}}]
Csharp_pattern3 = [{'LOWER': 'c'}, {'LOWER': '#'}]
Csharp_pattern4 = [{'LOWER': 'c'}, {'LOWER': '-'}, {'LOWER': 'sharp'}]
ASP_NET_pattern = [{'LOWER': 'asp.net'}]
CPP_pattern = [{'LOWER': {'IN': ['cpp', 'c++']}}]
from spacy.matcher import Matcher
matcher = Matcher(nlp.vocab)

matcher.add("OBJ_C_LANG", None, obj_c_pattern, obj_c_pattern2)
matcher.add("RUBY_LANG", None, ruby_pattern)
matcher.add("PYTHON", None, python_pattern)
matcher.add("JS_LANG", None, js_pattern)
matcher.add("GOLANG_LANG", None, golang_pattern)
matcher.add(".NET", None, net_pattern)
matcher.add("PERL", None, perl_pattern)
matcher.add("PHP", None, php_pattern)
matcher.add("CSHARP", None, 
            Csharp_pattern1, 
            Csharp_pattern2, 
            Csharp_pattern3,
            Csharp_pattern4)
matcher.add("CPP", None, CPP_pattern)
matcher.add("ASP_NET", None, ASP_NET_pattern)

doc = nlp("I am not an C# user, also like golang, python. But py is the earlist")
for match_id, start, end in matcher(doc):
    print(doc[start: end])

from IPython.display import HTML as html_print

def style(s, bold=False):
    blob = f"<text>{s}</text>"
    if bold:
        blob = f"<b style='background-color: #fff59d'>{blob}</b>"
    return blob

def html_generator(g,n = 20):
    blob=""
    for i in range(n):
        doc = next(g)
        state = [[t, False] for t in doc]
        for idx, start, end in matcher(doc):
            for i in range(start, end):
                state[i][1] = True
        blob += style(' '.join([style(str(t[0]), bold = t[1]) for t in state]) + '<br>')
    return blob
titles = (_ for _ in df['Title'])
g = (d for d in nlp.pipe(titles) if len(matcher(d)) > 0)

html_print(html_generator(g, n = 5))

 # Labelling   
import numpy as np
label_df = (pd.read_csv('have_label.txt', delimiter = '\t')
           [['Label', 'Title']]
            .loc[:600]
           .assign(Pred=lambda d: [len(matcher(d)) > 0 for d in nlp.pipe(d['Title'])])
           .assign(Pred=lambda d: d['Pred'].astype(np.int8)))    
           
# confusion matrix
from sklearn.metrics import confusion_matrix, classification_report
confusion_matrix(label_df['Label'], label_df['Pred'])
print(classification_report(label_df['Label'], label_df['Pred']))
# Pick language with version: python3, php5 etc.
def create_versioned(name):
    return [[{'LOWER': name}],
           [{'LOWER': {'REGEX': f'({name}\d+\.?\d*.?\d*)'}}],
           [{'LOWER': name}, {'TEXT': {'REGEX': '(\d+\.?\d*.?\d*)'}}],
           ]

create_versioned('python')
matcher = Matcher(nlp.vocab, validate = True)
matcher.add("PYTHON", None, *create_versioned('python'))

g = nlp.pipe(['i USE PYTHON 3, python3.6'
             ,'i take bypython'])
html_print(html_generator(g, n = 2))
